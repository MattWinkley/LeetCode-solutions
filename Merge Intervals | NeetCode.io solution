# The goal of this is to merge all overalpping intervals in a list of intervals
# Overlapping includes numbers that are equal
# A list of the merged intervals should be returned

# My line of thinking for this is to first sort the intervals.
# This sorts the list by the starting value of each interval.
# From here I would carry on the ending value of the current merged interval until it cannot find a starting value less than the current end point.
# This merged interval would then be added to the list res and the new starting point made to be the first value of the next interval.
# This process is done throughout the entire list and then checks if the last interval was added. If not then it is added and the res list is returned.
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        # Sorted the intervals so that they are ordered by starting values
        intervals = sorted(intervals)
        length = len(intervals)

        # This is our final list of the merged intervals
        res = []

        # These variables serve as the carried starting and ending values to be compared to the upcoming interval for possible merging
        starts = intervals[0][0]
        ends = intervals[0][1]

        # I choice length of intervals -1 because my solution involves comparing the current interval to the next one.
        for i in range(length - 1):

            # This checks if the current ending is creater than the beginning of the next interval.
            # If it is then the ends variable is updated to the max of either the current end ot the end of the next interval.
            if ends >= intervals[i+1][0]:
                ends = max(ends, intervals[i+1][1])

            # This is only processed if the ends variable does not merge with the starting value of the next interval.
            # The new merged interval is appended to res in the interval format [start, end]
            # Starts and ends varaibles are updated to be the next interval's values to be compared against future intervals
            else:
                res.append([starts,ends])
                starts = intervals[i+1][0]
                ends = intervals[i+1][1]

        # Because the last interval is not added by nature of the for loop,
        # this conditional makes sure it isn't already in the res list and appends the final interval to the list.
        if [starts, ends] not in res:
            res.append([starts, ends])

        # The new list of merged intervals is returned
        return res
            
